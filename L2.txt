6 kyu
Create Phone Number
JavaScript:
function createPhoneNumber(numbers){
      return `(${numbers.slice(0,3).join('')}) ${numbers.slice(3,6).join('')}-${numbers.slice(6).join('')}`;
}
6 days agoRefactorDiscuss
5 kyu
Function Cache
JavaScript:
function cache(func) {
      const cacheMap = new Map();
    
    return function(...args) {
        const key = JSON.stringify(args);
        if (cacheMap.has(key)) {
            return cacheMap.get(key);
        }
        const result = func.apply(this, args);
        cacheMap.set(key, result);
        return result;
    };
}
6 days agoRefactorDiscuss
6 kyu
Array Helpers
JavaScript:
Array.prototype.square = function() {
    return this.map(x => x * x);
}

Array.prototype.cube = function() {
    return this.map(x => x * x * x);
}

Array.prototype.sum = function() {
    return this.reduce((acc, val) => acc + val, 0);
}

Array.prototype.average = function() {
    return this.length ? this.sum() / this.length : NaN;
}

Array.prototype.even = function() {
    return this.filter(x => x % 2 === 0);
}

Array.prototype.odd = function() {
    return this.filter(x => x % 2 !== 0);
}
6 days agoRefactorDiscuss
5 kyu
T.T.T.33: Grandfather clock
JavaScript:
function howManyTimes(time1,time2){
      const d1 = new Date(time1);
    const d2 = new Date(time2);
    let strikes = 0;
    
    let current = new Date(d1);
    
    while (current < d2) {
        const hours = current.getHours() % 12 || 12;
        const minutes = current.getMinutes();
        const seconds = current.getSeconds();
        
        if (minutes === 0 && seconds < hours) {
            strikes++;
        } else if (minutes === 30 && seconds === 0) {
            strikes++;
        }
        
        current.setSeconds(current.getSeconds() + 1);
    }
    
    return strikes;
}
6 days agoRefactorDiscuss
6 kyu
Circularly Sorted Array
JavaScript:
function isCircleSorted( arr ){
      let drops = 0;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] > arr[(i + 1) % arr.length]) {
            drops++;
        }
    }
    return drops <= 1;
}
6 days agoRefactorDiscuss
5 kyu
Convert A Hex String To RGB
JavaScript:
function hexStringToRGB(hexString) {
      const r = parseInt(hexString.slice(1, 3), 16);
    const g = parseInt(hexString.slice(3, 5), 16);
    const b = parseInt(hexString.slice(5, 7), 16);
    
    return { r, g, b };
}
6 days agoRefactorDiscuss
6 kyu
Find the Nth longest string in an Array
JavaScript:
function longest(arr, n) {
const sorted = [...arr].sort((a, b) => b.length - a.length || arr.indexOf(a) - arr.indexOf(b));
    return sorted[n - 1];
}
6 days agoRefactorDiscuss
5 kyu
Extract the domain name from a URL
JavaScript:
function domainName(url){
   return url.replace(/(https?:\/\/)?(www\.)?/, '').split('.')[0];
}
6 days agoRefactorDiscuss
6 kyu
Lottery Ticket
JavaScript:
function bingo(ticket, win){
    let miniWins = 0;
    
    for (let i = 0; i < ticket.length; i++) {
        const [str, num] = ticket[i];
        
        for (let j = 0; j < str.length; j++) {
            if (str.charCodeAt(j) === num) {
                miniWins++;
                break;
            }
        }
    }
    
    return miniWins >= win ? 'Winner!' : 'Loser!';
}
6 days agoRefactorDiscuss
6 kyu
Split Strings
JavaScript:
function solution(str){
   const result = [];
    
    for (let i = 0; i < str.length; i += 2) {
        let pair = str.slice(i, i + 2);
        if (pair.length === 1) pair += '_';
        result.push(pair);
    }
    
    return result;
}
6 days agoRefactorDiscuss
6 kyu
Write Number in Expanded Form
JavaScript:
function expandedForm(num) {
  const numStr = num.toString();
    const parts = [];
    
    for (let i = 0; i < numStr.length; i++) {
        if (numStr[i] !== '0') {
            parts.push(numStr[i] + '0'.repeat(numStr.length - i - 1));
        }
    }
    
    return parts.join(' + ');

}
6 days agoRefactorDiscuss
6 kyu
Mexican Wave
JavaScript:
function wave(str){
  const result = [];
    
    for (let i = 0; i < str.length; i++) {
        if (str[i] !== ' ') {
            result.push(
                str.slice(0, i) + 
                str[i].toUpperCase() + 
                str.slice(i + 1)
            );
        }
    }
    
    return result;
}
6 days agoRefactorDiscuss
6 kyu
WeIrD StRiNg CaSe
JavaScript:
function toWeirdCase(str){
   return str.split(' ').map(word => 
        word.split('').map((char, index) => 
            index % 2 === 0 ? char.toUpperCase() : char.toLowerCase()
        ).join('')
    ).join(' ');
}
6 days agoRefactorDiscuss
5 kyu
Primes in numbers
JavaScript:
function primeFactors(n){
    let result = "";
    let factor = 2;
    
    while (n > 1) {
        let count = 0;
        
        while (n % factor === 0) {
            count++;
            n /= factor;
        }
        
        if (count > 0) {
            result += count === 1 ? `(${factor})` : `(${factor}**${count})`;
        }
        
        factor = factor === 2 ? 3 : factor + 2;
        
        if (factor * factor > n && n > 1) {
            result += `(${n})`;
            break;
        }
    }
    
    return result;
}
6 days agoRefactorDiscuss
6 kyu
Find the missing term in an Arithmetic Progression
JavaScript:
function findMissing(list) {  
   const n = list.length;
    const totalDiff = list[n - 1] - list[0];
    const expectedStep = totalDiff / n;
    
    for (let i = 1; i < n; i++) {
        const actualDiff = list[i] - list[i - 1];
        if (Math.abs(actualDiff) > Math.abs(expectedStep)) {
            return list[i - 1] + expectedStep;
        }
    }
  
}
6 days agoRefactorDiscuss
6 kyu
What century is it?
JavaScript:
function whatCentury(year)
{
  const century = Math.ceil(Number(year) / 100);
    
    if (century % 100 >= 11 && century % 100 <= 13) {
        return century + 'th';
    }
    
    switch (century % 10) {
        case 1: return century + 'st';
        case 2: return century + 'nd';
        case 3: return century + 'rd';
        default: return century + 'th';
    }
}
6 days agoRefactorDiscuss
6 kyu
IPv4 Parser
JavaScript:
function ipv4Parser(ip, mask){
   const ipParts = ip.split('.').map(Number);
    const maskParts = mask.split('.').map(Number);
    
    const network = [];
    const host = [];
    
    for (let i = 0; i < 4; i++) {
        network.push(ipParts[i] & maskParts[i]);
        host.push(ipParts[i] & ~maskParts[i]);
    }
    
    return [network.join('.'), host.join('.')];
}
6 days agoRefactorDiscuss
6 kyu
Two cube sums
JavaScript:
function hasTwoCubeSums(n) {
	    let firstA = 0, firstB = 0;
    let foundFirst = false;
    
    const max = Math.cbrt(n) + 1;
    

    for (let a = 1; a <= max; a++) {
        const a3 = a * a * a;
        if (a3 > n) break;
        
        for (let b = a + 1; b <= max; b++) {
            const b3 = b * b * b;
            const sum = a3 + b3;
            
            if (sum > n) break;
            if (sum === n) {
                if (!foundFirst) {
                    firstA = a;
                    firstB = b;
                    foundFirst = true;
                } else {

                    if (a !== firstA && a !== firstB && 
                        b !== firstA && b !== firstB) {
                        return true;
                    }
                }
            }
        }
    }
    
    return false;
}